

      deepdive.schema.variables {
        
      }
    

      deepdive.extraction.extractors.ext_sentences {
        cmd: """

	# TODO use temporary table
	deepdive create table "sentences"
	deepdive sql 'INSERT INTO sentences SELECT R0.document_id, R0.sentence, R0.words, R0.lemma, R0.pos_tags, R0.dependencies, R0.ner_tags, R0.sentence_offset, R0.sentence_id
FROM dd_new_sentences R0
        '
	# TODO rename temporary table to replace output_relation
	
        """
          output_relation: "sentences"
        style: "cmd_extractor"
          
          input_relations: [
            dd_new_sentences
          ]
      }
    

      deepdive.extraction.extractors.ext_has_spouse_candidates {
        cmd: """

	# TODO use temporary table
	deepdive create table "has_spouse_candidates"
	deepdive sql 'INSERT INTO has_spouse_candidates SELECT R0.person1_id, R0.person2_id, R0.sentence_id, R0.description, R0.relation_id, R0.is_true
FROM dd_new_has_spouse_candidates R0
        '
	# TODO rename temporary table to replace output_relation
	
        """
          output_relation: "has_spouse_candidates"
        style: "cmd_extractor"
          
          input_relations: [
            dd_new_has_spouse_candidates
          ]
      }
    

      deepdive.extraction.extractors.ext_articles {
        cmd: """

	# TODO use temporary table
	deepdive create table "articles"
	deepdive sql 'INSERT INTO articles SELECT R0.article_id, R0.text
FROM dd_new_articles R0
        '
	# TODO rename temporary table to replace output_relation
	
        """
          output_relation: "articles"
        style: "cmd_extractor"
          
          input_relations: [
            dd_new_articles
          ]
      }
    

      deepdive.extraction.extractors.ext_has_spouse_features {
        cmd: """

	# TODO use temporary table
	deepdive create table "has_spouse_features"
	deepdive sql 'INSERT INTO has_spouse_features SELECT R0.relation_id, R0.feature
FROM dd_new_has_spouse_features R0
        '
	# TODO rename temporary table to replace output_relation
	
        """
          output_relation: "has_spouse_features"
        style: "cmd_extractor"
          
          input_relations: [
            dd_new_has_spouse_features
          ]
      }
    

      deepdive.extraction.extractors.ext_people_mentions {
        cmd: """

	# TODO use temporary table
	deepdive create table "people_mentions"
	deepdive sql 'INSERT INTO people_mentions SELECT R0.sentence_id, R0.start_position, R0.length, R0.text, R0.mention_id
FROM dd_new_people_mentions R0
        '
	# TODO rename temporary table to replace output_relation
	
        """
          output_relation: "people_mentions"
        style: "cmd_extractor"
          
          input_relations: [
            dd_new_people_mentions
          ]
      }
    
deepdive.pipeline.run: ${PIPELINE}
deepdive.pipeline.pipelines.extraction: [
  ext_sentences
  ext_people_mentions
  ext_has_spouse_candidates
  ext_has_spouse_features
  ext_articles
]
deepdive.pipeline.pipelines.endtoend: [
  ext_sentences
  ext_people_mentions
  ext_has_spouse_candidates
  ext_has_spouse_features
  ext_articles
]
