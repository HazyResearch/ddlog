
  deepdive.db.default {
    driver: "org.postgresql.Driver"
    url: "jdbc:postgresql://"${PGHOST}":"${PGPORT}"/"${DBNAME}
    user: ${PGUSER}
    password: ${PGPASSWORD}
    dbname: ${DBNAME}
    host: ${PGHOST}
    port: ${PGPORT}
    incremental_mode: MATERIALIZATION
    }
    


      deepdive.schema.variables {
        smoke.label: Boolean
cancer.label: Boolean
      }
    

          deepdive.extraction.extractors.init_person_smokes {
            sql: """ DROP TABLE IF EXISTS person_smokes CASCADE;
            CREATE TABLE
            person_smokes(person_id bigint,
             smokes boolean)
            """
            style: "sql_extractor"
          }

          deepdive.extraction.extractors.init_smoke {
            sql: """ DROP TABLE IF EXISTS smoke CASCADE;
            CREATE TABLE
            smoke(person_id bigint,
     id bigint,
     label boolean)
            """
            style: "sql_extractor"
          }

          deepdive.extraction.extractors.init_cancer {
            sql: """ DROP TABLE IF EXISTS cancer CASCADE;
            CREATE TABLE
            cancer(person_id bigint,
      id bigint,
      label boolean)
            """
            style: "sql_extractor"
          }

          deepdive.extraction.extractors.init_friends {
            sql: """ DROP TABLE IF EXISTS friends CASCADE;
            CREATE TABLE
            friends(person_id bigint,
       friend_id bigint)
            """
            style: "sql_extractor"
          }

          deepdive.extraction.extractors.init_person_has_cancer {
            sql: """ DROP TABLE IF EXISTS person_has_cancer CASCADE;
            CREATE TABLE
            person_has_cancer(person_id bigint,
                 has_cancer boolean)
            """
            style: "sql_extractor"
          }

          deepdive.extraction.extractors.init_person {
            sql: """ DROP TABLE IF EXISTS person CASCADE;
            CREATE TABLE
            person(person_id bigint,
      name text)
            """
            style: "sql_extractor"
          }

        deepdive.extraction.extractors.cleanup {
          sql: """
          TRUNCATE person_smokes;
          TRUNCATE smoke;
          TRUNCATE cancer;
          TRUNCATE friends;
          TRUNCATE person_has_cancer;
          TRUNCATE person;
          """
          style: "sql_extractor"
        }

      deepdive.extraction.extractors.ext_cancer {
        sql: """ 
        INSERT INTO cancer SELECT DISTINCT R0.person_id, 0 AS id, R0.has_cancer AS label
          FROM person_has_cancer R0
        
          
        """
        style: "sql_extractor"
          
      }
    

      deepdive.extraction.extractors.ext_smoke {
        sql: """ 
        INSERT INTO smoke SELECT DISTINCT R0.person_id, 0 AS id, R0.smokes AS label
          FROM person_smokes R0
        
          
        """
        style: "sql_extractor"
          
      }
    

        deepdive.inference.factors.inf_imply_smoke_cancer {
          input_query: """
          SELECT R0.id AS "smoke.R0.id" , R1.id AS "cancer.R1.id" 
          FROM smoke R0, cancer R1, person_smokes R2
        WHERE R1.person_id = R0.person_id  AND R2.person_id = R0.person_id """
          function: "Imply(smoke.R0.label, cancer.R1.label)"
          weight: "0.5"
        }
      

        deepdive.inference.factors.inf_imply_smoke_smoke {
          input_query: """
          SELECT R0.id AS "smoke.R0.id" , R1.id AS "smoke.R1.id" 
          FROM smoke R0, smoke R1, friends R2
        WHERE R2.person_id = R0.person_id  AND R2.friend_id = R1.person_id """
          function: "Imply(smoke.R0.label, smoke.R1.label)"
          weight: "0.4"
        }
      
deepdive.pipeline.run: ${PIPELINE}
deepdive.pipeline.pipelines.initdb: [
  init_person_smokes
  init_smoke
  init_cancer
  init_friends
  init_person_has_cancer
  init_person
]
deepdive.pipeline.pipelines.extraction: [
  ext_cancer
  ext_smoke
]
deepdive.pipeline.pipelines.inference: [
  inf_imply_smoke_cancer
  inf_imply_smoke_smoke
]
deepdive.pipeline.pipelines.endtoend: [
  ext_cancer
  ext_smoke
  inf_imply_smoke_cancer
  inf_imply_smoke_smoke
]
deepdive.pipeline.base_dir: ${BASEDIR}
