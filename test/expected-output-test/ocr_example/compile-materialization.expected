
  deepdive.db.default {
    driver: "org.postgresql.Driver"
    url: "jdbc:postgresql://"${PGHOST}":"${PGPORT}"/"${DBNAME}
    user: ${PGUSER}
    password: ${PGPASSWORD}
    dbname: ${DBNAME}
    host: ${PGHOST}
    port: ${PGPORT}
    incremental_mode: MATERIALIZATION
    }
    


      deepdive.schema.variables {
        q1.label: Boolean
q2.label: Boolean
      }
    

          deepdive.extraction.extractors.init_label1 {
            sql: """ DROP TABLE IF EXISTS label1 CASCADE;
            CREATE TABLE
            label1(wid INT,
      val BOOLEAN)
            """
            style: "sql_extractor"
          }

          deepdive.extraction.extractors.init_features {
            sql: """ DROP TABLE IF EXISTS features CASCADE;
            CREATE TABLE
            features(id BIGSERIAL,
        word_id INT,
        feature_id INT,
        feature_val BOOLEAN)
            """
            style: "sql_extractor"
          }

          deepdive.extraction.extractors.init_label2 {
            sql: """ DROP TABLE IF EXISTS label2 CASCADE;
            CREATE TABLE
            label2(wid INT,
      val BOOLEAN)
            """
            style: "sql_extractor"
          }

          deepdive.extraction.extractors.init_q1 {
            sql: """ DROP TABLE IF EXISTS q1 CASCADE;
            CREATE TABLE
            q1(wid INT,
  id bigint,
  label boolean)
            """
            style: "sql_extractor"
          }

          deepdive.extraction.extractors.init_q2 {
            sql: """ DROP TABLE IF EXISTS q2 CASCADE;
            CREATE TABLE
            q2(wid INT,
  id bigint,
  label boolean)
            """
            style: "sql_extractor"
          }

        deepdive.extraction.extractors.cleanup {
          sql: """
          TRUNCATE label1;
          TRUNCATE features;
          TRUNCATE label2;
          TRUNCATE q1;
          TRUNCATE q2;
          """
          style: "sql_extractor"
        }

      deepdive.extraction.extractors.ext_q1 {
        sql: """ 
        INSERT INTO q1 SELECT DISTINCT R0.wid, 0 AS id, R0.val AS label
          FROM label1 R0
        
          
        """
        style: "sql_extractor"
          
      }
    

      deepdive.extraction.extractors.ext_q2 {
        sql: """ 
        INSERT INTO q2 SELECT DISTINCT R0.wid, 0 AS id, R0.val AS label
          FROM label2 R0
        
          
        """
        style: "sql_extractor"
          
      }
    

        deepdive.inference.factors.inf_istrue_q1 {
          input_query: """
          SELECT R0.id AS "q1.R0.id" , R1.feature_id AS "dd_weight_column_0" 
          FROM q1 R0, features R1
        WHERE R1.word_id = R0.wid """
          function: "Imply(q1.R0.label)"
          weight: "?(dd_weight_column_0)"
        }
      

        deepdive.inference.factors.inf_istrue_q2 {
          input_query: """
          SELECT R0.id AS "q2.R0.id" , R1.feature_id AS "dd_weight_column_0" 
          FROM q2 R0, features R1
        WHERE R1.word_id = R0.wid """
          function: "Imply(q2.R0.label)"
          weight: "?(dd_weight_column_0)"
        }
      
deepdive.pipeline.run: ${PIPELINE}
deepdive.pipeline.pipelines.initdb: [
  init_label1
  init_features
  init_label2
  init_q1
  init_q2
]
deepdive.pipeline.pipelines.extraction: [
  ext_q1
  ext_q2
]
deepdive.pipeline.pipelines.inference: [
  inf_istrue_q1
  inf_istrue_q2
]
deepdive.pipeline.pipelines.endtoend: [
  ext_q1
  ext_q2
  inf_istrue_q1
  inf_istrue_q2
]
deepdive.pipeline.base_dir: ${BASEDIR}
