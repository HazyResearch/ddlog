
  deepdive.db.default {
    driver: "org.postgresql.Driver"
    url: "jdbc:postgresql://"${PGHOST}":"${PGPORT}"/"${DBNAME}
    user: ${PGUSER}
    password: ${PGPASSWORD}
    dbname: ${DBNAME}
    host: ${PGHOST}
    port: ${PGPORT}
    incremental_mode: ORIGINAL
    }
    


      deepdive.schema.variables {
        
      }
    

          deepdive.extraction.extractors.extraction_rule_1 {
            sql: """ DROP TABLE IF EXISTS b CASCADE;
            CREATE TABLE
            b(k int,
 p text,
 q text,
 r int)
            """
            style: "sql_extractor"
          }

          deepdive.extraction.extractors.extraction_rule_0 {
            sql: """ DROP TABLE IF EXISTS a CASCADE;
            CREATE TABLE
            a(k int)
            """
            style: "sql_extractor"
          }

          deepdive.extraction.extractors.extraction_rule_2 {
            sql: """ DROP TABLE IF EXISTS c CASCADE;
            CREATE TABLE
            c(s text,
 n int,
 t text)
            """
            style: "sql_extractor"
          }

        deepdive.extraction.extractors.cleanup {
          sql: """
          TRUNCATE b;
          TRUNCATE a;
          TRUNCATE c;
          """
          style: "sql_extractor"
        }

      deepdive.extraction.extractors.extraction_rule_9 {
        sql: """ DROP VIEW IF EXISTS E;
        CREATE VIEW E AS SELECT (R0.k :: INT) AS column_0
FROM b R0
        
        """
        style: "sql_extractor"
          
      }
    

      deepdive.extraction.extractors.extraction_rule_25 {
        sql: """ DROP VIEW IF EXISTS X;
        CREATE VIEW X AS SELECT R0.k AS column_0
FROM b R0, c R1
        WHERE R1.n = R0.k 
        """
        style: "sql_extractor"
          
      }
    

      deepdive.extraction.extractors.extraction_rule_18 {
        sql: """ DROP VIEW IF EXISTS N;
        CREATE VIEW N AS SELECT R0.k AS column_0
FROM b R0
        WHERE EXISTS (SELECT 1 FROM c R1_0 WHERE R1_0.n = R0.k  AND R1_0.s > 'a')
        """
        style: "sql_extractor"
          
      }
    

      deepdive.extraction.extractors.extraction_rule_21 {
        sql: """ DROP VIEW IF EXISTS T;
        CREATE VIEW T AS SELECT R0.k AS column_0
FROM b R0 LEFT OUTER JOIN c R1_0 ON R1_0.n = R0.k  AND R1_0.s > R0.p
        WHERE R1_0.s > R0.p
        """
        style: "sql_extractor"
          
      }
    

      deepdive.extraction.extractors.extraction_rule_14 {
        sql: """ DROP VIEW IF EXISTS J;
        CREATE VIEW J AS SELECT R0.k AS column_0
FROM b R0
        WHERE ((R0.k + R0.r) = 100 OR (NOT R0.k > 50))
        """
        style: "sql_extractor"
          
      }
    

      deepdive.extraction.extractors.extraction_rule_22 {
        sql: """ DROP VIEW IF EXISTS U;
        CREATE VIEW U AS SELECT R0_0.k AS column_0
FROM b R0_0 ON  FULL OUTER JOIN c R1_0 ON R1_0.n = R0_0.k 
        
        """
        style: "sql_extractor"
          
      }
    

      deepdive.extraction.extractors.extraction_rule_10 {
        sql: """ DROP VIEW IF EXISTS F;
        CREATE VIEW F AS SELECT ((R0.k :: INT) + (R0.r :: INT)) AS column_0
FROM b R0
        
        """
        style: "sql_extractor"
          
      }
    

      deepdive.extraction.extractors.extraction_rule_5 {
        sql: """ DROP VIEW IF EXISTS A;
        CREATE VIEW A AS SELECT (R0.k + (R0.r * (R0.k + R0.r))) AS column_0
FROM b R0
        
        """
        style: "sql_extractor"
          
      }
    

      deepdive.extraction.extractors.extraction_rule_17 {
        sql: """ DROP VIEW IF EXISTS M;
        CREATE VIEW M AS SELECT R0.k AS column_0
FROM b R0
        WHERE EXISTS (SELECT 1 FROM c R1_0 WHERE R1_0.n = R0.k )
        """
        style: "sql_extractor"
          
      }
    

      deepdive.extraction.extractors.extraction_rule_13 {
        sql: """ DROP VIEW IF EXISTS I;
        CREATE VIEW I AS SELECT R0.k AS column_0
FROM b R0
        WHERE ((R0.k + R0.r) = 100 OR (R0.k > 50 AND R0.r < 10))
        """
        style: "sql_extractor"
          
      }
    

      deepdive.extraction.extractors.extraction_rule_11 {
        sql: """ DROP VIEW IF EXISTS G;
        CREATE VIEW G AS SELECT R0.k AS column_0
FROM b R0
        WHERE (R0.k + R0.r) = 100
        """
        style: "sql_extractor"
          
      }
    

      deepdive.extraction.extractors.extraction_rule_24 {
        sql: """ DROP VIEW IF EXISTS V;
        CREATE VIEW V AS SELECT R0.n AS column_0
FROM c R0, a R1
        WHERE R1.k = R0.n 
        """
        style: "sql_extractor"
          
      }
    

      deepdive.extraction.extractors.extraction_rule_3 {
        sql: """ DROP VIEW IF EXISTS Q;
        CREATE VIEW Q AS SELECT DISTINCT ('test' :: TEXT) AS column_0, 123 AS column_1, R0.k AS column_2, unnest(R1.q) AS column_3
FROM a R0, b R1, c R2
        WHERE R1.k = R0.k  AND R2.s = (R1.p || R1.q) AND R2.n = 10 AND R2.t = 'foo' AND (R1.r > 100 OR ((NOT R1.r < 20) AND R1.r < 50))
        """
        style: "sql_extractor"
          
      }
    

      deepdive.extraction.extractors.extraction_rule_16 {
        sql: """ DROP VIEW IF EXISTS L;
        CREATE VIEW L AS SELECT DISTINCT R0.k AS column_0
FROM b R0
        LIMIT 100
        """
        style: "sql_extractor"
          
      }
    

      deepdive.extraction.extractors.extraction_rule_6 {
        sql: """ DROP VIEW IF EXISTS B;
        CREATE VIEW B AS SELECT func((R0.k + (R0.r + R0.k))) AS column_0
FROM b R0
        
        """
        style: "sql_extractor"
          
      }
    

      deepdive.extraction.extractors.extraction_rule_4 {
        sql: """ DROP VIEW IF EXISTS P;
        CREATE VIEW P AS SELECT R1.p AS column_0, R1.q AS column_1, MAX(R1.r) AS column_2
FROM a R0, b R1
        WHERE R1.k = R0.k 
        GROUP BY R1.p, R1.q
        """
        style: "sql_extractor"
          
      }
    

      deepdive.extraction.extractors.extraction_rule_7 {
        sql: """ DROP VIEW IF EXISTS C;
        CREATE VIEW C AS SELECT func(func(func(R0.k))) AS column_0
FROM b R0
        
        """
        style: "sql_extractor"
          
      }
    

      deepdive.extraction.extractors.extraction_rule_12 {
        sql: """ DROP VIEW IF EXISTS H;
        CREATE VIEW H AS SELECT R0.k AS column_0
FROM b R0
        WHERE ((R0.k + R0.r) = 100 AND R0.k > 50)
        """
        style: "sql_extractor"
          
      }
    

      deepdive.extraction.extractors.extraction_rule_23 {
        sql: """ DROP VIEW IF EXISTS W;
        CREATE VIEW W AS SELECT R0.k AS column_0
FROM a R0
        WHERE NOT EXISTS (SELECT 1 FROM c R1_0 WHERE NOT (R1_0.n < R0.k))
        """
        style: "sql_extractor"
          
      }
    

      deepdive.extraction.extractors.extraction_rule_15 {
        sql: """ DROP VIEW IF EXISTS K;
        CREATE VIEW K AS SELECT R0.k AS column_0
FROM b R0
        WHERE ((R0.k + R0.r) = 100 AND ((NOT R0.k > 50) OR R0.k = 40))
        """
        style: "sql_extractor"
          
      }
    

      deepdive.extraction.extractors.extraction_rule_19 {
        sql: """ DROP VIEW IF EXISTS O;
        CREATE VIEW O AS SELECT R0.k AS column_0
FROM b R0
        WHERE EXISTS (SELECT 1 FROM c R1_0, a R1_1 WHERE R1_0.n = R0.k  AND R1_1.k = R0.k )
        """
        style: "sql_extractor"
          
      }
    

      deepdive.extraction.extractors.extraction_rule_8 {
        sql: """ DROP VIEW IF EXISTS D;
        CREATE VIEW D AS SELECT (func((R0.k * func2((R0.r + R0.k)))) + R0.k) AS column_0
FROM b R0
        
        """
        style: "sql_extractor"
          
      }
    

      deepdive.extraction.extractors.extraction_rule_20 {
        sql: """ DROP VIEW IF EXISTS S;
        CREATE VIEW S AS SELECT R0.k AS column_0
FROM b R0 LEFT OUTER JOIN c R1_0 ON R1_0.n = R0.k 
        
        """
        style: "sql_extractor"
          
      }
    
deepdive.pipeline.run: ${PIPELINE}
deepdive.pipeline.pipelines.initdb: [extraction_rule_1, extraction_rule_0, extraction_rule_2]
deepdive.pipeline.pipelines.extraction: [extraction_rule_21, extraction_rule_7, extraction_rule_12, extraction_rule_20, extraction_rule_16, extraction_rule_25, extraction_rule_19, extraction_rule_22, extraction_rule_3, extraction_rule_4, extraction_rule_18, extraction_rule_8, extraction_rule_10, extraction_rule_13, extraction_rule_23, extraction_rule_5, extraction_rule_9, extraction_rule_14, extraction_rule_17, extraction_rule_11, extraction_rule_24, extraction_rule_15, extraction_rule_6]
deepdive.pipeline.pipelines.endtoend: [extraction_rule_21, extraction_rule_7, extraction_rule_12, extraction_rule_20, extraction_rule_16, extraction_rule_25, extraction_rule_19, extraction_rule_22, extraction_rule_3, extraction_rule_4, extraction_rule_18, extraction_rule_8, extraction_rule_10, extraction_rule_13, extraction_rule_23, extraction_rule_5, extraction_rule_9, extraction_rule_14, extraction_rule_17, extraction_rule_11, extraction_rule_24, extraction_rule_15, extraction_rule_6]
deepdive.pipeline.pipelines.cleanup: [cleanup]
